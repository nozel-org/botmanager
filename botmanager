#!/bin/sh

#############################################################################
# Version 0.4.0-RELEASE (30-01-2023)
#############################################################################

#############################################################################
# Copyright 2023 Nozel/Sebas Veeke. Licenced under a Creative Commons
# Attribution-NonCommercial-ShareAlike 4.0 International License.
#
# See https://creativecommons.org/licenses/by-nc-sa/4.0/
#
# Contact:
# > e-mail      mail@nozel.org
# > GitHub      nozel-org
#############################################################################

#############################################################################
# VARIABLES
#############################################################################

# serverbot version
BOTMANAGER_VERSION='0.4.0'

# commands
CURL="$(command -v curl)"
WGET="$(command -v wget)"

# program variables
BOTMANAGER_CONFIG_SOURCE='https://raw.githubusercontent.com/nozel-org/botmanager/main/resources/botmanager.conf'

# colors
NC='\033[0;0m'
BOLD='\033[1m'
#UNDER='\033[4m'
#WHITE='\033[1;37m'
#RED='\033[0;31m'
#GREEN='\033[0;32m'
YELLOW='\033[1;33m'
LRED='\033[1;31m'
#LGREEN='\033[1;32m'
#LMAGENTA='\033[1;35m'
#LCYAN='\033[1;36m'

####################################################################################################
# ARGUMENT HANDLING
####################################################################################################

# populate validation variables with zeros for validation
ARGUMENT_VERSION='0'
ARGUMENT_HELP='0'
ARGUMENT_CRON='0'
ARGUMENT_DISABLE_CRON='0'
ARGUMENT_OVERVIEW='0'
ARGUMENT_INSTALL='0'
ARGUMENT_REMOVE='0'
ARGUMENT_UPDATE='0'

# read arguments
while test -n "$1"; do
    case "$1" in
        # options
        --version|-version|version|--v|-v)
            ARGUMENT_VERSION='1'
            shift
            ;;

        --help|-help|help|--h|-h)
            ARGUMENT_HELP='1'
            shift
            ;;
        
        --cron|-cron|cron)
            ARGUMENT_CRON='1'
            shift
            ;;

        --disable-cron|-disable-cron|disable-cron)
            ARGUMENT_CRON='1'
            shift
            ;;

        # features
        --overview|overview|-o|--list|list|-l|--show|show)
            ARGUMENT_OVERVIEW='1'
            shift
            ;;

        --install|install|-i)
            ARGUMENT_INSTALL='1'
            shift
            ;;

        --remove|remove|-r)
            ARGUMENT_REMOVE='1'
            shift
            ;;

        --update|update|-u)
            ARGUMENT_UPDATE='1'
            shift
            ;;

        # other
        *)
            ARGUMENT_NONE='1'
            shift
            ;;
    esac
done


####################################################################################################
# ERROR FUNCTIONS
####################################################################################################

error() {
    printf "%b%s%b\n" "${LRED}" "$@" "${NC}"
    exit 1
}

####################################################################################################
# REQUIREMENT AND VALIDATION FUNCTIONS
####################################################################################################

requirement_root() {
    # show error when botmanager isn't run with root privileges
    if [ "$(id -u)" -ne '0' ]; then
        error 'botmanager: error: used argument must be run with root privileges'
    fi
}

requirement_os() {
    # show error when freebsd-version cannot be found
    if [ ! "$(command -v freebsd-version)" ]; then
        error 'botmanager: operating system is not supported'
    fi
}

requirement_curl() {
    # show error when curl cannot be found
    if [ ! "$(command -v curl)" ]; then
        error 'botmanager: error: curl is not installed'
    fi
}

requirement_wget() {
    # show error when wget cannot be found
    if [ ! "$(command -v curl)" ]; then
        error 'botmanager: error: wget is not installed'
    fi
}

####################################################################################################
# GENERAL FUNCTIONS
####################################################################################################

option_version() {
    printf "%bBotmanager %s %b\n" "${BOLD}" "${SERVERBOT_VERSION}" "${NC}"
    printf "%bCopyright (C) 2023 Nozel.%b\n" "${BOLD}" "${NC}"
    printf "%bLicense CC Attribution-NonCommercial-ShareAlike 4.0 Int.%b\n\n" "${BOLD}" "${NC}"
    printf "%bWritten by Sebas Veeke%b\n" "${BOLD}" "${NC}"

    # exit when done
    exit 0
}

option_help() {
    printf "%bUsage:%b\n" "${BOLD}" "${NC}"
    printf "%b  botmanager [feature]...%b\n" "${BOLD}" "${NC}"
    printf "%b  botmanager [option]...%b\n\n" "${BOLD}" "${NC}"
    printf "%bFeatures:%b\n" "${BOLD}" "${NC}"
    printf "  -o, --overview             Shows the bot status on this device\n"
    printf "  -i, --install              Install one of the bots\n"
    printf "  -r, --remove               Remove a installed bot\n"
    printf "  -u, --update               Update all installed bots\n"
    printf "%bOptions:%b\n" "${BOLD}" "${NC}"
    printf "  --cron                     Set daily automatic update\n"
    printf "  --disable-cron             Set daily automatic update\n"
    printf "  --help                     Display this help and exit\n"
    printf "  --version                  Display version information and exit\n"

    # exit when done
    exit 0
}

option_cron() {
    requirement_root

    printf "%b[1/2] Adding cronjob for automatic bot updates%b\n" "${BOLD}" "${NC}"
    rm -f /etc/cron.d/botmanager
    printf "# This cronjob manages daily automated botmanager program updates\n" > /etc/cron.d/botmanager
    printf "0 1 * * * root /usr/local/bin/botmanager --update\n" >> /etc/cron.d/botmanager
    printf "%b[2/2] Changing cronjob owner and group to root:wheel%b\n" "${BOLD}" "${NC}"
    chown root:wheel /etc/cron.d/botmanager
    printf "\n%bAll done! \\\( ^ ᴗ ^ )/%b\n\n" "${BOLD}" "${NC}"
    printf "\n%bYour new schedule can be found in /etc/cron.d/botmanager.%b\n" "${BOLD}" "${NC}"

    # exit when done
    exit 0
}

option_disable_cron() {
    requirement_root

    printf "%b[1] Removing botmanager cronjob%b\n" "${BOLD}" "${NC}"
    rm -f /etc/cron.d/botmanager
    printf "\n%bAll done! \\\( ^ ᴗ ^ )/%b\n\n" "${BOLD}" "${NC}"

    # exit when done
    exit 0
}

####################################################################################################
# SUPPORT FUNCTIONS
####################################################################################################

version() { 
    printf "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; 
}

####################################################################################################
# GATHER FUNCTIONS
####################################################################################################

gather_latest_bot_information() {
    BOTMANAGER_CONFIG_TEMP_FILE="$(mktemp)"
    wget -q "${BOTMANAGER_CONFIG_SOURCE}" -O "${BOTMANAGER_CONFIG_TEMP_FILE}"
}

gather_local_bot_information() {
    BOTMANAGER_INSTALLED='0'
    SERVERBOT_INSTALLED='0'
    BACKUPBOT_INSTALLED='0'
    UPTIMEBOT_INSTALLED='0'
    UPDATEBOT_INSTALLED='0'
    SPARRY_INSTALLED='0'
    TORBOT_INSTALLED='0'

    if [ -f "${BOTMANAGER_PROGRAM_DESTINATION}" ]; then
        BOTMANAGER_INSTALLED='YES'
        BOTMANAGER_INSTALL_LOCATION="${BOTMANAGER_PROGRAM_DESTINATION}"
        BOTMANAGER_LOCAL_VERSION="$(cat "${BOTMANAGER_PROGRAM_DESTINATION}" | grep "BOTMANAGER_VERSION=" | cut -f 2 -d '=' | tr -d \')"
        BOTMANAGER_LATEST_VERSION="${BOTMANAGER_VERSION}"
        if [ $(version "${BOTMANAGER_LOCAL_VERSION}") -ge $(version "${BOTMANAGER_LATEST_VERSION}") ]; then
            BOTMANAGER_STATUS='OK'
        else
            BOTMANAGER_STATUS="OUTDATED"
        fi
    else
        BOTMANAGER_INSTALLED='NO'
        BOTMANAGER_INSTALL_LOCATION=''
        BOTMANAGER_LOCAL_VERSION=''
        BOTMANAGER_LATEST_VERSION=''
        BOTMANAGER_UP_TO_DATE=''
    fi
    if [ -f "${SERVERBOT_PROGRAM_DESTINATION}" ]; then
        SERVERBOT_INSTALLED='YES'
        SERVERBOT_INSTALL_LOCATION="${SERVERBOT_PROGRAM_DESTINATION}"
        SERVERBOT_LOCAL_VERSION="$(cat "${SERVERBOT_PROGRAM_DESTINATION}" | grep "SERVERBOT_VERSION=" | cut -f 2 -d '=' | tr -d \')"
        SERVERBOT_LATEST_VERSION="${SERVERBOT_VERSION}"
        if [ $(version "${SERVERBOT_LOCAL_VERSION}") -ge $(version "${SERVERBOT_LATEST_VERSION}") ]; then
            SERVERBOT_STATUS='OK'
        else
            SERVERBOT_STATUS="OUTDATED"
        fi
    else
        SERVERBOT_INSTALLED='NO'
        SERVERBOT_LOCAL_VERSION=''
        SERVERBOT_LATEST_VERSION=''
        SERVERBOT_UP_TO_DATE=''
    fi
    if [ -f "${BACKUPBOT_PROGRAM_DESTINATION}" ]; then
        BACKUPBOT_INSTALLED='YES'
        BACKUPBOT_INSTALL_LOCATION="${BACKUPBOT_PROGRAM_DESTINATION}"
        BACKUPBOT_LOCAL_VERSION="$(cat "${BACKUPBOT_PROGRAM_DESTINATION}" | grep "BACKUPBOT_VERSION=" | cut -f 2 -d '=' | tr -d \')"
        BACKUPBOT_LATEST_VERSION="${BACKUPBOT_VERSION}"
        if [ $(version "${BACKUPBOT_LOCAL_VERSION}") -ge $(version "${BACKUPBOT_LATEST_VERSION}") ]; then
            BACKUPBOT_STATUS='OK'
        else
            BACKUPBOT_STATUS="OUTDATED"
        fi
    else
        BACKUPBOT_INSTALLED='NO'
        BACKUPBOT_LOCAL_VERSION=''
        BACKUPBOT_LATEST_VERSION=''
        BACKUPBOT_UP_TO_DATE=''
    fi
    if [ -f "${UPTIMEBOT_PROGRAM_DESTINATION}" ]; then
        UPTIMEBOT_INSTALLED='YES'
        UPTIMEBOT_INSTALL_LOCATION="${UPTIMEBOT_PROGRAM_DESTINATION}"
        UPTIMEBOT_LOCAL_VERSION="$(cat "${UPTIMEBOT_PROGRAM_DESTINATION}" | grep "UPTIMEBOT_VERSION=" | cut -f 2 -d '=' | tr -d \')"
        UPTIMEBOT_LATEST_VERSION="${UPTIMEBOT_VERSION}"
        if [ $(version "${UPTIMEBOT_LOCAL_VERSION}") -ge $(version "${UPTIMEBOT_LATEST_VERSION}") ]; then
            UPTIMEBOT_STATUS='OK'
        else
            UPTIMEBOT_STATUS="OUTDATED"
        fi
    else
        UPTIMEBOT_INSTALLED='NO'
        UPTIMEBOT_LOCAL_VERSION=''
        UPTIMEBOT_LATEST_VERSION=''
        UPTIMEBOT_UP_TO_DATE=''
    fi
    if [ -f "${UPDATEBOT_PROGRAM_DESTINATION}" ]; then
        UPDATEBOT_INSTALLED='YES'
        UPDATEBOT_INSTALL_LOCATION="${UPDATEBOT_PROGRAM_DESTINATION}"
        UPDATEBOT_LOCAL_VERSION="$(cat "${UPDATEBOT_PROGRAM_DESTINATION}" | grep "UPDATEBOT_VERSION=" | cut -f 2 -d '=' | tr -d \')"
        UPDATEBOT_LATEST_VERSION="${UPDATEBOT_VERSION}"
        if [ $(version "${UPDATEBOT_LOCAL_VERSION}") -ge $(version "${UPDATEBOT_LATEST_VERSION}") ]; then
            UPDATEBOT_STATUS='OK'
        else
            UPDATEBOT_STATUS="OUTDATED"
        fi
    else
        UPDATEBOT_INSTALLED='NO'
        UPDATEBOT_LOCAL_VERSION=''
        UPDATEBOT_LATEST_VERSION=''
        UPDATEBOT_UP_TO_DATE=''
    fi
    if [ -f "${SPARRY_PROGRAM_DESTINATION}" ]; then
        SPARRY_INSTALLED='YES'
        SPARRY_INSTALL_LOCATION="${SPARRY_PROGRAM_DESTINATION}"
        SPARRY_LOCAL_VERSION="$(cat "${SPARRY_PROGRAM_DESTINATION}" | grep "SPARRY_VERSION=" | cut -f 2 -d '=' | tr -d \')"
        SPARRY_LATEST_VERSION="${SPARRY_VERSION}"
        if [ $(version "${SPARRY_LOCAL_VERSION}") -ge $(version "${SPARRY_LATEST_VERSION}") ]; then
            SPARRY_STATUS='OK'
        else
            SPARRY_STATUS="OUTDATED"
        fi
    else
        SPARRY_INSTALLED='NO'
        SPARRY_LOCAL_VERSION=''
        SPARRY_LATEST_VERSION=''
        SPARRY_UP_TO_DATE=''
    fi
    if [ -f "${TORBOT_PROGRAM_DESTINATION}" ]; then
        TORBOT_INSTALLED='YES'
        TORBOT_INSTALL_LOCATION="${TORBOT_PROGRAM_DESTINATION}"
        TORBOT_LOCAL_VERSION="$(cat "${TORBOT_PROGRAM_DESTINATION}" | grep "TORBOT_VERSION=" | cut -f 2 -d '=' | tr -d \')"
        TORBOT_LATEST_VERSION="${TORBOT_VERSION}"
        if [ $(version "${TORBOT_LOCAL_VERSION}") -ge $(version "${TORBOT_LATEST_VERSION}") ]; then
            TORBOT_STATUS='OK'
        else
            TORBOT_STATUS="OUTDATED"
        fi
    else
        TORBOT_INSTALLED='NO'
        TORBOT_LOCAL_VERSION=''
        TORBOT_LATEST_VERSION=''
        TORBOT_UP_TO_DATE=''
    fi
}

remove_temp_files() {
    if [ -f "${BOTMANAGER_CONFIG_TEMP_FILE}" ]; then
        rm "${BOTMANAGER_CONFIG_TEMP_FILE}"
    fi
}

####################################################################################################
# FEATURE FUNCTIONS
####################################################################################################

feature_overview() {
    gather_latest_bot_information
    . "${BOTMANAGER_CONFIG_TEMP_FILE}"
    gather_local_bot_information

    DIVIDER="=========================================================================================="
    HEADER="\n %-4s %-12s %-10s %-10s %-8s %-8s %-20s\n"
    FORMAT=" %-4s %-12s %-10s %-10s %-8s %-8s %-20s\n"
    WIDTH="90"
    printf "%b" "${BOLD}"
    printf "${HEADER}" "NR" "BOT" "INSTALLED" "STATUS" "LOCAL" "LATEST" "LOCATION"
    printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"

    printf "${FORMAT}" "1" "${BOTMANAGER_NAME}" "${BOTMANAGER_INSTALLED}" "${BOTMANAGER_STATUS}" "${BOTMANAGER_LOCAL_VERSION}" "${BOTMANAGER_LATEST_VERSION}" "${BOTMANAGER_INSTALL_LOCATION}"
    printf "${FORMAT}" "2" "${SERVERBOT_NAME}" "${SERVERBOT_INSTALLED}" "${SERVERBOT_STATUS}" "${SERVERBOT_LOCAL_VERSION}" "${SERVERBOT_LATEST_VERSION}" "${SERVERBOT_INSTALL_LOCATION}"
    printf "${FORMAT}" "3" "${BACKUPBOT_NAME}" "${BACKUPBOT_INSTALLED}" "${BACKUPBOT_STATUS}" "${BACKUPBOT_LOCAL_VERSION}" "${BACKUPBOT_LATEST_VERSION}" "${BACKUPBOT_INSTALL_LOCATION}"
    printf "${FORMAT}" "4" "${UPTIMEBOT_NAME}" "${UPTIMEBOT_INSTALLED}" "${UPTIMEBOT_STATUS}" "${UPTIMEBOT_LOCAL_VERSION}" "${UPTIMEBOT_LATEST_VERSION}" "${UPTIMEBOT_INSTALL_LOCATION}"
    printf "${FORMAT}" "5" "${UPDATEBOT_NAME}" "${UPDATEBOT_INSTALLED}" "${UPDATEBOT_STATUS}" "${UPDATEBOT_LOCAL_VERSION}" "${UPDATEBOT_LATEST_VERSION}" "${UPDATEBOT_INSTALL_LOCATION}"
    printf "${FORMAT}" "6" "${SPARRY_NAME}" "${SPARRY_INSTALLED}" "${SPARRY_STATUS}" "${SPARRY_LOCAL_VERSION}" "${SPARRY_LATEST_VERSION}" "${SPARRY_INSTALL_LOCATION}"
    printf "${FORMAT}" "7" "${TORBOT_NAME}" "${TORBOT_INSTALLED}" "${TORBOT_STATUS}" "${TORBOT_LOCAL_VERSION}" "${TORBOT_LATEST_VERSION}" "${TORBOT_INSTALL_LOCATION}"
    printf "%b" "${NC}"

    remove_temp_files
}

feature_install() {
    gather_latest_bot_information
    . "${BOTMANAGER_CONFIG_TEMP_FILE}"
    gather_local_bot_information

    DIVIDER="======================================================================"
    HEADER="\n %-4s %-12s %-10s %-10s\n"
    FORMAT=" %-4s %-12s %-10s %-10s\n"
    WIDTH="70"
    printf "%b" "${BOLD}"
    printf "${HEADER}" "NR" "BOT" "INSTALLED" "DESCRIPTION"
    printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"

    printf "${FORMAT}" "1" "${BOTMANAGER_NAME}" "${BOTMANAGER_INSTALLED}"
    printf "${FORMAT}" "2" "${SERVERBOT_NAME}" "${SERVERBOT_INSTALLED}"
    printf "${FORMAT}" "3" "${BACKUPBOT_NAME}" "${BACKUPBOT_INSTALLED}"
    printf "${FORMAT}" "4" "${UPTIMEBOT_NAME}" "${UPTIMEBOT_INSTALLED}"
    printf "${FORMAT}" "5" "${UPDATEBOT_NAME}" "${UPDATEBOT_INSTALLED}"
    printf "${FORMAT}" "6" "${SPARRY_NAME}" "${SPARRY_INSTALLED}"
    printf "${FORMAT}\n" "7" "${TORBOT_NAME}" "${TORBOT_INSTALLED}"

    while true
        do
            read -r -p 'Choose program to install (number): ' PROGRAM_NUMBER_TO_INSTALL
            [ "${PROGRAM_NUMBER_TO_INSTALL}" -ge '1' ] && [ "${PROGRAM_NUMBER_TO_INSTALL}" -le '7' ] && break
            error 'enter number from 1 to 7 or press ctrl+c to abort'
        done
    echo $PROGRAM_NUMBER_TO_INSTALL

    printf "%b" "${NC}"
    remove_temp_files

}

####################################################################################################
# MAIN FUNCTIONS
####################################################################################################

botmanager_main() {
    requirement_os
    requirement_root

    if [ "${ARGUMENT_OVERVIEW}" = '1' ]; then
        feature_overview
    elif [ "${ARGUMENT_INSTALL}" = '1' ]; then
        feature_install
    elif [ "${ARGUMENT_REMOVE}" = '1' ]; then
        feature_remove
    elif [ "${ARGUMENT_UPDATE}" = '1' ]; then
        feature_update
    elif [ "${ARGUMENT_CRON}" = '1' ]; then
        option_cron
    elif [ "${ARGUMENT_DISABLE_CRON}" = '1' ]; then
        option_disable_cron
    elif [ "${ARGUMENT_VERSION}" = '1' ]; then
        option_version
    elif [ "${ARGUMENT_HELP}" = '1' ]; then
        option_help
    # the overview is shown when no arguments were given
    else
        feature_overview
    fi
}

####################################################################################################
# CALL MAIN FUNCTIONS
####################################################################################################

botmanager_main
