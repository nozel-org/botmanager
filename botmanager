#!/bin/sh

#############################################################################
# Version 2.0.0-RELEASE (06-04-2025)
#############################################################################

#############################################################################
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2023 Sebas Veeke. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#############################################################################

#############################################################################
# Contact:
# > E-mail      mail@nozel.org
# > Website     https://nozel.org
# > Codeberg    https://codeberg.org/nozel/botmanager
#############################################################################

#############################################################################
# PROGRAM VARIABLES
#############################################################################

# serverbot version
BOTMANAGER_VERSION='2.0.0'
BOTMANAGER_VERSION_DATE='06-04-2025'

# program variables
#BOTMANAGER_CRON='0 3 * * *'
BOTMANAGER_TEMPORARY_DIRECTORY='/tmp/botmanager'
BOTMANAGER_MANIFEST_URL='https://codeberg.org/nozel/botmanager/raw/branch/main/resources/manifest.list'
BOTMANAGER_PKG_URL='https://codeberg.org/nozel/botmanager/raw/branch/main/resources'

# colors
#NC='\033[0;0m'
#BOLD='\033[1m'
#YELLOW='\033[1;33m'
#LRED='\033[1;31m'
#LGREEN='\033[1;32m'
#LMAGENTA='\033[1;35m'
#LCYAN='\033[1;36m'
#WHITE='\033[1;37m'

####################################################################################################
# ARGUMENT HANDLING
####################################################################################################

# populate validation variables with zeros for validation
ARGUMENT_VERSION='0'
ARGUMENT_HELP='0'
ARGUMENT_CRON='0'
ARGUMENT_DISABLE_CRON='0'
ARGUMENT_OVERVIEW='0'
ARGUMENT_INSTALL='0'
ARGUMENT_REMOVE='0'
ARGUMENT_UPDATE='0'
ARGUMENT_UNATTENDED='0'

# read arguments
while test -n "$1"; do
    case "$1" in
        # options
        --version|-version|version|--v|-v)
            ARGUMENT_VERSION='1'
            shift
            ;;

        --help|-help|help|--h|-h)
            ARGUMENT_HELP='1'
            shift
            ;;
        
        --cron|-cron|cron)
            ARGUMENT_CRON='1'
            shift
            ;;

        --disable-cron|-disable-cron|disable-cron)
            ARGUMENT_DISABLE_CRON='1'
            shift
            ;;

        # features
        --overview|overview|-o|--list|list|-l|--show|show)
            ARGUMENT_OVERVIEW='1'
            shift
            ;;

        --install|install|-i)
            ARGUMENT_INSTALL='1'
            shift
            ;;

        --remove|remove|-r|--uninstall|uninstall|--delete|delete)
            ARGUMENT_REMOVE='1'
            shift
            ;;

        --update|update|-u)
            ARGUMENT_UPDATE='1'
            shift
            ;;

        --unattended)
            ARGUMENT_UNATTENDED='1'
            shift
            ;;

        # other
        *)
            ARGUMENT_NONE='1'
            shift
            ;;
    esac
done

####################################################################################################
# ERROR AND LOG FUNCTIONS
####################################################################################################

program_error() {
    printf "botmanager: error: %s %s %s\n" "${1}" "${2}" "${3}"
    exit 1
}

program_logger() {
    logger -t botmanager "${1}"
}

####################################################################################################
# REQUIREMENT AND VALIDATION FUNCTIONS
####################################################################################################

requirement_root() {
    # show error when botmanager isn't run with root privileges
    if [ "$(id -u)" -ne '0' ]; then
        error 'botmanager: error: used argument must be run with root privileges'
    fi
}

requirement_os() {
    # show error when freebsd-version cannot be found
    if [ ! "$(command -v freebsd-version)" ]; then
        error 'botmanager: operating system is not supported'
    fi
}

requirement_curl() {
    # show error if curl cannot be found (which probably means the user has not installed curl)
    if [ ! "$(command -v curl)" ]; then
        program_error 'curl is not installed'
    else
        CURL="$(command -v curl)"
    fi
}

####################################################################################################
# GENERAL FUNCTIONS
####################################################################################################

option_version() {
    printf "Botmanager %s (%s)\n" "${BOTMANAGER_VERSION}" "${BOTMANAGER_VERSION_DATE}"
    printf "Copyright (C) 2023 S. Veeke. All rights reserved.\n"
    printf "SPDX-License-Identifier: Apache-2.0.\n"
    exit 0
}

option_help() {
    printf "Usage:\n"
    printf "  botmanager [feature]...\n"
    printf "  botmanager [option]...\n\n"
    printf "Features:\n"
    printf "  -o, --overview             Shows the bot status on this device\n"
    printf "  -i, --install              Install one of the bots\n"
    printf "  -r, --remove               Remove a installed bot\n"
    printf "  -u, --update               Update all installed bots\n"
    printf "      --unattended           Add to --update for unattended action\n"
    printf "Options:\n"
    printf "  --cron                     Set daily automatic update\n"
    printf "  --disable-cron             Set daily automatic update\n"
    printf "  --help                     Display this help and exit\n"
    printf "  --version                  Display version information and exit\n"
}

#option_cron_validate_schedule() {
#    # validate whether cron job schedule consists of allowed characters
#    case "${1}" in
#        (*[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'!@#$%^&()_+=\[\]{}\|;:",.<>?']*)
#            CRON_ERROR='1'
#            printf " >   [!] unsupported characters\n"
#            ;;
#        (*)
#            printf " >   [i] supported characters\n"
#            ;;
#    esac

#    # validate whether cron job schedule consists of 5 substrings
#    if [ "$(printf "%s" "${1}" | awk -F' ' '{print NF}')" -eq 5 ]; then
#        printf " >   [i] supported format\n"
#    else
#        CRON_ERROR='1'
#        printf " >   [!] unsuported format\n"
#    fi
#}

#option_cron_check_configuration() {
#    # first check whether a automated feature is enabled
#    if [ "${1}" -ge '1' ]; then
#        # then check whether the corresponding cron parameter has been set in serverbot.conf
#        if [ "${2}" -eq '1' ]; then
#            # then validate the cron parameter and report any issues
#            printf " >  Validating %s (enabled)\n" "${4}"
#            option_cron_validate_schedule "${3}"
#        else
#            # finally abort when issues are found
#            printf " >  %s is not set\n" "${4}"
#            program_error "${4} not set in ${SERVERBOT_CONFIGURATION}"
#        fi
#    else
#        # skip check if feature is disabled
#        printf " >  Skipping %s (disabled)\n" "${4}"
#    fi
#}

option_cron() {
    requirement_root
    printf "(1) Adding cronjob for automatic updates\n"
    rm -f /etc/cron.d/botmanager
    touch /etc/cron.d/botmanager
    printf "# This cronjob manages daily automated botmanager updates\n" > /etc/cron.d/botmanager
    printf "0 3 * * * root curl -s -o /usr/local/bin/botmanager https://codeberg.org/nozel/botmanager/raw/branch/main/botmanager && chown root:wheel /usr/local/bin/botmanager && chmod 555 /usr/local/bin/botmanager\n" >> /etc/cron.d/botmanager
    printf "# This cronjob manages daily automated botmanager package updates\n" >> /etc/cron.d/botmanager
    printf "0 4 * * * root /usr/local/bin/botmanager --update --unattended\n" >> /etc/cron.d/botmanager
    printf "(2) Changing cronjob owner and group to root:wheel\n"
    chown root:wheel /etc/cron.d/botmanager
    printf "\nAll done! \\\( ^ ᴗ ^ )/\n"
    printf "\nYour new schedule can be found in /etc/cron.d/botmanager.\n"
}

option_disable_cron() {
    requirement_root
    printf "[1] Removing botmanager cronjob\n"
    rm -f /etc/cron.d/botmanager
    printf "\nAll done! \\\( ^ ᴗ ^ )/\n"
}

####################################################################################################
# SUPPORT FUNCTIONS
####################################################################################################

version() { 
    printf "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; 
}

capitalize() {
    CAPITALIZED_STRING=''
    CAPITALIZED_STRING="$(echo ${1} | tr '[a-z]' '[A-Z]')"
}

create_temporary_directory() {
    if [ ! -d "${BOTMANAGER_TEMPORARY_DIRECTORY}" ]; then
        mkdir "${BOTMANAGER_TEMPORARY_DIRECTORY}"
    fi
}

remove_temporary_directory() {
    if [ -d "${BOTMANAGER_TEMPORARY_DIRECTORY}" ]; then
        rm -rf "${BOTMANAGER_TEMPORARY_DIRECTORY}"
    fi
}

get_manifest() {
    requirement_curl
    create_temporary_directory
    "${CURL}" -s -o "${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list" "${BOTMANAGER_MANIFEST_URL}"
    if [ "$?" -eq '1' ]; then
        program_error "cannot download manifest file"
    fi
}

get_pkg() {
    requirement_curl
    create_temporary_directory
    "${CURL}" -s -o "${BOTMANAGER_TEMPORARY_DIRECTORY}/${1}.pkg" "${BOTMANAGER_PKG_URL}/${1}.pkg"
    if [ "$?" -eq '1' ]; then
        program_error "cannot download pkg file"
    fi
}

get_all_pkg() {
    while read -r line; do
        get_pkg "${line}"
    done <${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list
}

get_pkg_information() {
    PKG_NAME="$1"
    capitalize "$1"
    PKG_NAME_CAPITALIZED="${CAPITALIZED_STRING}"
    . "${BOTMANAGER_TEMPORARY_DIRECTORY}/${1}.pkg"
    eval "PKG_LATEST_VERSION=\${${PKG_NAME_CAPITALIZED}_LATEST_VERSION}"
    eval "PKG_DESCRIPTION=\${${PKG_NAME_CAPITALIZED}_DESCRIPTION}"
    eval "PKG_REPOSITORY=\${${PKG_NAME_CAPITALIZED}_REPOSITORY}"
    eval "PKG_PROGRAM=\${${PKG_NAME_CAPITALIZED}_PROGRAM}"
    eval "PKG_PROGRAM_HASH_SHA256=\${${PKG_NAME_CAPITALIZED}_PROGRAM_HASH_SHA256}"
    eval "PKG_PROGRAM_SOURCE=\${${PKG_NAME_CAPITALIZED}_PROGRAM_SOURCE}"
    eval "PKG_PROGRAM_DESTINATION=\${${PKG_NAME_CAPITALIZED}_PROGRAM_DESTINATION}"
    eval "PKG_PROGRAM_OWNER=\${${PKG_NAME_CAPITALIZED}_PROGRAM_OWNER}"
    eval "PKG_PROGRAM_GROUP=\${${PKG_NAME_CAPITALIZED}_PROGRAM_GROUP}"
    eval "PKG_PROGRAM_MODE=\${${PKG_NAME_CAPITALIZED}_PROGRAM_MODE}"
    eval "PKG_PROGRAM_CONFIGURATION=\${${PKG_NAME_CAPITALIZED}_PROGRAM_CONFIGURATION}"
    eval "PKG_PROGRAM_CONFIGURATION_HASH_SHA256=\${${PKG_NAME_CAPITALIZED}_PROGRAM_CONFIGURATION_HASH_SHA256}"
    eval "PKG_PROGRAM_CONFIGURATION_SOURCE=\${${PKG_NAME_CAPITALIZED}_PROGRAM_CONFIGURATION_SOURCE}"
    eval "PKG_PROGRAM_CONFIGURATION_DESTINATION=\${${PKG_NAME_CAPITALIZED}_PROGRAM_CONFIGURATION_DESTINATION}"
    eval "PKG_PROGRAM_CONFIGURATION_OWNER=\${${PKG_NAME_CAPITALIZED}_PROGRAM_CONFIGURATION_OWNER}"
    eval "PKG_PROGRAM_CONFIGURATION_GROUP=\${${PKG_NAME_CAPITALIZED}_PROGRAM_CONFIGURATION_GROUP}"
    eval "PKG_PROGRAM_CONFIGURATION_MODE=\${${PKG_NAME_CAPITALIZED}_PROGRAM_CONFIGURATION_MODE}"
    eval "PKG_USER_CONFIGURATION=\${${PKG_NAME_CAPITALIZED}_USER_CONFIGURATION}"
    eval "PKG_USER_CONFIGURATION_HASH_SHA256=\${${PKG_NAME_CAPITALIZED}_USER_CONFIGURATION_HASH_SHA256}"
    eval "PKG_USER_CONFIGURATION_SOURCE=\${${PKG_NAME_CAPITALIZED}_USER_CONFIGURATION_SOURCE}"
    eval "PKG_USER_CONFIGURATION_DESTINATION=\${${PKG_NAME_CAPITALIZED}_USER_CONFIGURATION_DESTINATION}"
    eval "PKG_USER_CONFIGURATION_OWNER=\${${PKG_NAME_CAPITALIZED}_USER_CONFIGURATION_OWNER}"
    eval "PKG_USER_CONFIGURATION_GROUP=\${${PKG_NAME_CAPITALIZED}_USER_CONFIGURATION_GROUP}"
    eval "PKG_USER_CONFIGURATION_MODE=\${${PKG_NAME_CAPITALIZED}_USER_CONFIGURATION_MODE}"
}

get_local_pkg_information() {
    # depends on get_pkg_information
    PKG_LOCAL_VERSION="$(< "${PKG_PROGRAM_DESTINATION}" grep "${PKG_NAME_CAPITALIZED}_VERSION=" | cut -f 2 -d '=' | tr -d \')"
    PKG_LOCAL_DATE="$(< "${PKG_PROGRAM_DESTINATION}" grep "${PKG_NAME_CAPITALIZED}_VERSION_DATE=")"
}

check_local_install() {
    # depends on get_pkg_information
    PKG_LOCAL_INSTALLED='0'
    if [ -f "${PKG_PROGRAM_DESTINATION}" ]; then
        PKG_LOCAL_INSTALLED='1'
        PKG_LOCAL_INSTALLED_ANY='1'
    else
        PKG_LOCAL_INSTALLED='0'
    fi
}

####################################################################################################
# FEATURE FUNCTIONS
####################################################################################################

feature_overview() {
    remove_temporary_directory
    get_manifest
    get_all_pkg
    DIVIDER="=========================================================================================="
    HEADER="\n %-4s %-12s %-10s %-7s %-6s %-7s %-20s\n"
    FORMAT=" %-4s %-12s %-10s %-7s %-6s %-7s %-20s\n"
    WIDTH="90"
    NUMBER='1'
    printf '\nThe following packages are installed:\n'
    printf "${HEADER}" "#" "package" "installed" "status" "local" "latest" "location"
    printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
    PKG_LOCAL_INSTALLED_ANY='0'
    while read -r line; do
        get_pkg_information "${line}"
        check_local_install
        if [ "${PKG_LOCAL_INSTALLED}" -eq '1' ]; then
            PKG_INSTALLED='YES'
            get_local_pkg_information
            if [ "$(version "${PKG_LOCAL_VERSION}")" -ge "$(version "${PKG_LATEST_VERSION}")" ]; then
                PKG_STATUS='OK'
            else
                PKG_STATUS="UPDATE"
            fi
            printf "${FORMAT}" "${NUMBER}" "${PKG_NAME}" "${PKG_INSTALLED}" "${PKG_STATUS}" "${PKG_LOCAL_VERSION}" "${PKG_LATEST_VERSION}" "${PKG_PROGRAM_DESTINATION}"
            NUMBER="$((NUMBER + 1))"
        fi
    done <${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list
    if [ "${PKG_LOCAL_INSTALLED_ANY}" -eq '0' ]; then
        printf "${FORMAT}" "0" "NONE" "N/A" "N/A" "N/A" "N/A" "N/A"
    fi
    printf '\n'
}

feature_install() {
    remove_temporary_directory
    get_manifest
    get_all_pkg
    DIVIDER="=========================================================================================="
    HEADER="\n %-4s %-12s %-7s %-10s\n"
    FORMAT_OVERVIEW=" %-4s %-12s %-7s %-30s\n"
    FORMAT_INSTALLATION=" %-5s %-27s %-4s %-30s\n"
    WIDTH="90"
    NUMBER='1'
    printf '\nThe following packages are available for installation:\n'
    printf "${HEADER}" "#" "package" "latest" "description"
    printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
    while read -r line; do
        get_pkg_information "${line}"
        check_local_install
        if [ "${PKG_LOCAL_INSTALLED}" -eq '0' ]; then
            printf "${FORMAT_OVERVIEW}" "${NUMBER}" "${PKG_NAME}" "${PKG_LATEST_VERSION}" "${PKG_DESCRIPTION}"
            NUMBER="$((NUMBER + 1))"
        fi
    done <${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list
    printf '\n'
    NUMBER="$((NUMBER - 1))" # to accomodate the empty line in the manifest
    while true
        do
            read -r -p ' Choose package to install (number): ' PACKAGE_NUMBER_TO_INSTALL
            [ "${PACKAGE_NUMBER_TO_INSTALL}" -ge '1' ] && [ "${PACKAGE_NUMBER_TO_INSTALL}" -le "${NUMBER}" ] && break
            printf 'enter valid number or press ctrl+c to abort\n'
        done
    NUMBER='1'
    while read -r line; do
        get_pkg_information "${line}"
        check_local_install
        if [ "${PKG_LOCAL_INSTALLED}" -eq '0' ]; then
            if [ "${PACKAGE_NUMBER_TO_INSTALL}" -ne "${NUMBER}" ]; then
                NUMBER="$((NUMBER + 1))"
            elif [ "${PACKAGE_NUMBER_TO_INSTALL}" -eq "${NUMBER}" ]; then
                break
            fi
        fi
    done <${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list
    printf "\n Installing %s\n" "${PKG_NAME}"
    printf "${FORMAT_INSTALLATION}" "(1)" "Downloading ${PKG_NAME}" "=>" "${PKG_PROGRAM_DESTINATION}"
    "${CURL}" -s -o "${PKG_PROGRAM_DESTINATION}" "${PKG_PROGRAM_SOURCE}"
    printf "${FORMAT_INSTALLATION}" "(2)" "Setting ownership" "=>"  "${PKG_PROGRAM_OWNER}:${PKG_PROGRAM_GROUP}"
    chown "${PKG_PROGRAM_OWNER}:${PKG_PROGRAM_GROUP}" "${PKG_PROGRAM_DESTINATION}"
    printf "${FORMAT_INSTALLATION}" "(3)" "Setting permissions" "=>" "${PKG_PROGRAM_MODE}"
    chmod "${PKG_PROGRAM_MODE}" "${PKG_PROGRAM_DESTINATION}"
    if [ "${PKG_PROGRAM_CONFIGURATION}" -eq '1' ]; then
        printf "${FORMAT_INSTALLATION}" "(4)" "Downloading configuration" "=>" "${PKG_PROGRAM_CONFIGURATION_DESTINATION}"
        "${CURL}" --create-dirs -s -o "${PKG_PROGRAM_CONFIGURATION_DESTINATION}" "${PKG_PROGRAM_CONFIGURATION_SOURCE}"
        printf "${FORMAT_INSTALLATION}" "(5)" "Setting ownership" "=>" "${PKG_PROGRAM_CONFIGURATION_OWNER}:${PKG_PROGRAM_CONFIGURATION_GROUP}"
        chown "${PKG_PROGRAM_CONFIGURATION_OWNER}:${PKG_PROGRAM_CONFIGURATION_GROUP}" "${PKG_PROGRAM_CONFIGURATION_DESTINATION}"
        printf "${FORMAT_INSTALLATION}" "(6)" "Setting permissions" "=>" "${PKG_PROGRAM_CONFIGURATION_MODE}"
        chmod "${PKG_PROGRAM_CONFIGURATION_MODE}" "${PKG_PROGRAM_CONFIGURATION_DESTINATION}"
    fi
    if [ "${PKG_USER_CONFIGURATION}" -eq '1' ]; then
        printf "${FORMAT_INSTALLATION}" "(7)" "Downloading configuration" "=>" "${PKG_USER_CONFIGURATION_DESTINATION}"
        "${CURL}" --create-dirs -s -o "${PKG_USER_CONFIGURATION_DESTINATION}" "${PKG_USER_CONFIGURATION_SOURCE}"
        printf "${FORMAT_INSTALLATION}" "(8)" "Setting ownership" "=>" "${PKG_USER_CONFIGURATION_OWNER}:${PKG_USER_CONFIGURATION_GROUP}"
        chown "${PKG_USER_CONFIGURATION_OWNER}:${PKG_USER_CONFIGURATION_GROUP}" "${PKG_USER_CONFIGURATION_DESTINATION}"
        printf "${FORMAT_INSTALLATION}" "(9)" "Setting permissions" "=>" "${PKG_USER_CONFIGURATION_MODE}"
        chmod "${PKG_USER_CONFIGURATION_MODE}" "${PKG_USER_CONFIGURATION_DESTINATION}"
    fi
    program_logger "Installed" "${PKG_PROGRAM_DESTINATION}" "succesfully"
    printf "\n All done! \\\( ^ ᴗ ^ )/\n\n"
}

feature_remove() {
    feature_overview
    FORMAT_REMOVE=" %-5s %-43s %-4s %-30s\n"
    NUMBER="$((NUMBER - 1))" # to accomodate the empty line in the manifest
    while true
        do
            read -r -p ' Choose program to remove (number): ' PACKAGE_NUMBER_TO_REMOVE
            [ "${PACKAGE_NUMBER_TO_REMOVE}" -ge '1' ] && [ "${PACKAGE_NUMBER_TO_REMOVE}" -le "${NUMBER}" ] && break
            printf 'enter valid number or press ctrl+c to abort\n'
        done
    NUMBER='1'
    while read -r line; do
        get_pkg_information "${line}"
        check_local_install
        if [ "${PKG_LOCAL_INSTALLED}" -eq '1' ]; then
            if [ "${PACKAGE_NUMBER_TO_REMOVE}" -ne "${NUMBER}" ]; then
                NUMBER="$((NUMBER + 1))"
            elif [ "${PACKAGE_NUMBER_TO_REMOVE}" -eq "${NUMBER}" ]; then
                break
            fi
        fi
    done <${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list
    printf "\n Removing %s\n" "${PKG_NAME}"
    printf "${FORMAT_REMOVE}" "(1)" "Found ${PKG_PROGRAM_DESTINATION}" "=>" "removing"
    rm -f "${PKG_PROGRAM_DESTINATION}"
    if [ "${PKG_PROGRAM_CONFIGURATION}" -eq '1' ]; then
        printf "${FORMAT_REMOVE}" "(2)" "Found ${PKG_PROGRAM_CONFIGURATION_DESTINATION}" "=>" "removing"
        rm -f "${PKG_PROGRAM_CONFIGURATION_DESTINATION}"
    fi
    if [ "${PKG_USER_CONFIGURATION}" -eq '1' ]; then
        printf "${FORMAT_REMOVE}" "(3)" "Found ${PKG_USER_CONFIGURATION_DESTINATION}" "=>" "removing"
        rm -f "${PKG_USER_CONFIGURATION_DESTINATION}"
    fi
    program_logger "Removed" "${PKG_PROGRAM_DESTINATION}" "succesfully"
    printf "\n All done! \\\( ^ ᴗ ^ )/\n\n"
}

feature_update() {
    feature_overview
    FORMAT_UPDATE=" %-8s %-17s %-4s %-12s\n"
    printf " Updating software\n"
    while read -r line; do
        get_pkg_information "${line}"
        check_local_install
        if [ "${PKG_LOCAL_INSTALLED}" -eq '1' ]; then
            PKG_INSTALLED='YES'
            get_local_pkg_information
            if [ "$(version "${PKG_LOCAL_VERSION}")" -ge "$(version "${PKG_LATEST_VERSION}")" ]; then
                printf " No update available for %s, skipping\n" "${PKG_NAME}"
            elif [ "$(version "${PKG_LOCAL_VERSION}")" -lt "$(version "${PKG_LATEST_VERSION}")" ]; then
                printf "${FORMAT_UPDATE}" "Updating" "${PKG_NAME} ${PKG_LOCAL_VERSION}" "=>" "${PKG_LATEST_VERSION}"
                "${CURL}" -s -o "${PKG_PROGRAM_DESTINATION}" "${PKG_PROGRAM_SOURCE}"
                program_logger "Updated" "${PKG_PROGRAM_DESTINATION}" "succesfully"
            fi
        fi
    done <${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list
    printf "\n All done! \\\( ^ ᴗ ^ )/\n\n"
}

feature_unattended_update() {
    remove_temporary_directory
    get_manifest
    get_all_pkg
    while read -r line; do
        get_pkg_information "${line}"
        check_local_install
        if [ "${PKG_LOCAL_INSTALLED}" -eq '1' ]; then
            PKG_INSTALLED='YES'
            get_local_pkg_information  
            if [ "$(version "${PKG_LOCAL_VERSION}")" -lt "$(version "${PKG_LATEST_VERSION}")" ]; then
                "${CURL}" -s -o "${PKG_PROGRAM_DESTINATION}" "${PKG_PROGRAM_SOURCE}"
                program_logger "Updated" "${PKG_PROGRAM_DESTINATION}" "succesfully"
            fi
        fi
    done <${BOTMANAGER_TEMPORARY_DIRECTORY}/manifest.list
}

####################################################################################################
# MAIN FUNCTIONS
####################################################################################################

botmanager_main() {
    requirement_os
    requirement_root

    if [ "${ARGUMENT_UPDATE}" = '1' ] && [ "${ARGUMENT_UNATTENDED}" = '1' ]; then
        feature_unattended_update
        exit 0
    elif [ "${ARGUMENT_OVERVIEW}" = '1' ]; then
        feature_overview
        exit 0
    elif [ "${ARGUMENT_INSTALL}" = '1' ]; then
        feature_install
        exit 0
    elif [ "${ARGUMENT_REMOVE}" = '1' ]; then
        feature_remove
        exit 0
    elif [ "${ARGUMENT_UPDATE}" = '1' ]; then
        feature_update
        exit 0
    elif [ "${ARGUMENT_CRON}" = '1' ]; then
        option_cron
        exit 0
    elif [ "${ARGUMENT_DISABLE_CRON}" = '1' ]; then
        option_disable_cron
        exit 0
    elif [ "${ARGUMENT_VERSION}" = '1' ]; then
        option_version
        exit 0
    elif [ "${ARGUMENT_HELP}" = '1' ]; then
        option_help
        exit 0
    elif [ "${ARGUMENT_NONE}" = '1' ]; then
        feature_overview
        exit 0
    # the overview is shown when no arguments were given
    else
        feature_overview
        exit 0
    fi
    remove_temporary_directory
}

####################################################################################################
# CALL MAIN FUNCTIONS
####################################################################################################

botmanager_main
